{"version":3,"sources":["components/footer/index.jsx","templates/home/index.jsx","styles/colors.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","style","padding","Home","state","Fragment","fontFamilly","role","aria-label","fontSize","fontFamily","color","href","textAlign","class","data-icon","data-inline","marginTop","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAiBeA,G,MAfA,WACX,OAEI,gCACI,yBAAKC,UAAU,2CAA2CC,MAAO,CAE7DC,QAAS,SAET,0DC2EDC,E,2MA9EbC,MAAQ,G,wEAEN,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKL,UAAU,sCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,6BACb,wBACEA,UAAU,4CACVC,MAAO,CAAEK,YAAa,uBAEtB,0BAAMC,KAAK,MAAMC,aAAW,SAA5B,gBAJF,eAYA,uBACER,UAAU,OACVC,MAAO,CACLQ,SAAU,OACVC,WAAY,qBACZC,MChCQ,YDmCV,0BAAMX,UAAU,mCAAhB,kEACC,6BACD,6BAVF,sFAWqF,6BAXrF,sFAayB,6BAbzB,IAagC,6BAbhC,sCAcqC,uBAAGY,KAAK,+BAAR,eAErC,uBAAGZ,UAAU,OAAOC,MAAO,CAAEY,UAAW,WACtC,uBAAGD,KAAK,6BAA4B,0BAClCE,MAAM,eACNb,MAAO,CAAEQ,SAAU,QACnBM,YAAU,aACVC,cAAY,WAGd,uBAAGJ,KAAK,+BAA8B,0BACpCE,MAAM,eACNb,MAAO,CAAEQ,SAAU,QACnBM,YAAU,gBACVC,cAAY,WAGd,uBAAGJ,KAAK,8BAA6B,0BACnCE,MAAM,UACNb,MAAO,CAAEQ,SAAU,QACnBM,YAAU,eACVC,cAAY,YAIhB,yBAAKf,MAAO,CAAEgB,UAAW,QAAUjB,UAAU,eAC3C,uBAAGY,KAAK,6BAA6BZ,UAAU,+BAA/C,SACA,uBAAGY,KAAK,4BAA4BZ,UAAU,gCAA9C,4BAWR,kBAAC,EAAD,W,GAzEWkB,aEGJC,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.85f85977.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => {\n    return ( \n\n        <footer>\n            <div className=\"container-fluid text-center text-primary\" style={{\n                // borderTop: \"1px solid #000\",\n                padding: '1rem'\n            }}>\n                <p>Copyright @ AMONO Aymar</p>\n            </div>\n        </footer>\n\n     );\n}\n \nexport default Footer;","import React, { Component } from \"react\";\nimport * as COLORS from \"../../styles/colors\";\nimport \"./style.css\";\n// import Post from \"../../components/post\";\nimport Footer from \"../../components/footer\";\n\nclass Home extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container text-center my-5 mt-lg-5\">\n          <div className=\"row\">\n            <div className=\"col-12 col-md-1 col-lg-2\"></div>\n            <div className=\"col-12 col-md-10 col-lg-8\">\n              <h1\n                className=\"display-4 text-primary align-items-center\"\n                style={{ fontFamilly: \"Roboto, sans-serif\" }}\n              >\n                <span role=\"img\" aria-label=\"Hello\">ðŸ‘‹</span>, I'm Amono\n                {/* <span\n              class=\"iconify\"\n              data-icon=\"feather:terminal\"\n              data-inline=\"false\"\n            ></span> */}\n              </h1>\n              {/* <h5>Call me mono57</h5> */}\n              <p\n                className=\"mt-5\"\n                style={{\n                  fontSize: \"18px\",\n                  fontFamily: \"Roboto, sans-serif\",\n                  color: COLORS.GRAY_LIGHT\n                }}\n              >\n                <span className=\"text-uppercase font-weight-bold\">Software developer | Freelance | Python Trainer | Entrepreneur</span>\n                 <br />\n                <br />\n                I write somethings about Django, React, React Native, Iot, Electronics and more... <br /> \n                Check my Medium posts or my opensources github repositories\n                to know more about me. <br /> <br/>\n                Hire me ? Let me a text message on <a href=\"https://twitter.com/mono57_\"> Twitter !</a>\n              </p>\n              <p className=\"mt-5\" style={{ textAlign: \"center\" }}>\n                <a href=\"https://github.com/mono57\"><span\n                  class=\"iconify mr-5\"\n                  style={{ fontSize: \"30px\" }}\n                  data-icon=\"cib:github\"\n                  data-inline=\"false\"\n                ></span></a>\n                \n                <a href=\"https://twitter.com/mono57_\"><span\n                  class=\"iconify mr-5\"\n                  style={{ fontSize: \"30px\" }}\n                  data-icon=\"logos:twitter\"\n                  data-inline=\"false\"\n                ></span></a>\n\n                <a href=\"https://medium.com/@mono57\"><span\n                  class=\"iconify\"\n                  style={{ fontSize: \"30px\" }}\n                  data-icon=\"cib:medium-m\"\n                  data-inline=\"false\"\n                ></span></a>\n              </p>\n\n              <div style={{ marginTop: \"4rem\" }} className=\"text-center\">\n                <a href=\"https://medium.com/@mono57\" className=\"btn btn-outline-primary m-2\">Posts</a>\n                <a href=\"https://github.com/mono57\" className=\"btn btn-outline-primary  m-2\">\n                  OpenSources Projects\n                </a>\n                {/* <a href=\"https://medium.com/@mono57\" className=\"btn btn-outline-primary m-2\">Skills</a> */}\n              </div>\n\n              \n            </div>\n          </div>\n        </div>\n\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","export const GRAY_LIGHT = \"#8f98a3\"","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./templates/home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import bootstrap's styles\nimport  './assets/lib/bootstrap/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}